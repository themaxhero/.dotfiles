; Windows foldstart

(defwindow bar-left
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top center" :x 0 :y 0 :width "100%")
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :exclusive true
  :namespace "bar"
  :reserve (struts :distance "16px" :side "top")
  (bar :monitor "DP-1"))


(defwindow bar-right
  :monitor 1
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top center" :x 0 :y 0 :width "100%")
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :exclusive true
  :namespace "bar"
  :reserve (struts :distance "16px" :side "top")
  (bar :monitor "DP-3"))
; foldend

; Bar foldstart
(defwidget bar [monitor]
  (box :orientation "h"
       :space-evenly true
       :class "bar"
    (box :halign "start"
         :space-evenly false
      (workspaces :monitor monitor)
      (player))
    (box :halign "center" :spacing 16 (window_name))
    (box :halign "end"
         :spacing 12
         :hexpand true
         :space-evenly false
      (currency_exchange)
      (notifications)
      (github)
      ;(updates)
      ;(trash)
      ;(noisetorch)
      (microphone)
      (speaker)
      (ping)
      (network)
      (disk)
      (ram)
      ;(nvidia)
      (cpu)
      (date)
      (time))))
; foldend

; Variables foldstart
(defpoll time_poll :interval "1s" "date +%H:%M")
(defpoll date_poll :interval "1m" "date +%Y年%m月%d日")
(defpoll trash_poll :interval "10s" "~/.config/eww/modules/trash.sh")
(defpoll noisetorch_poll :initial "" :interval "10s" "~/.config/eww/modules/noisetorch.sh")
(defpoll updates_poll :initial "" :interval "1m" "~/.config/eww/modules/updates.sh &") 
(defpoll github_poll :initial "" :interval "1m" "~/.config/eww/modules/github.sh")
(defpoll ping_poll :interval "10s" "~/.config/eww/modules/ping.sh")
(defpoll currency_exchange_poll :interval "20m" "~/.config/eww/modules/currency.lua | grep 'USD'")

(deflisten workspaces_listen "~/.config/eww/modules/workspaces.lua")
(deflisten window_name_listen "~/.config/eww/modules/window_name.lua")
(deflisten player_listen :initial '{"show": "no", "content": ""}' "~/.config/eww/modules/player.sh")
(deflisten nvidia_listen "~/.config/eww/modules/nvidia.sh")
(deflisten notifications_listen :initial '{"show": "no", "content": ""}' "~/.config/eww/modules/notifications.sh")

; Make this cleaner at some point
(defpoll microphone_poll :interval "999h" "~/.config/eww/modules/microphone.sh")
(defpoll speaker_poll :interval "999h" "~/.config/eww/modules/speaker.sh")
; foldend

; Modules foldstart
; Generic icon module foldstart
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))
; foldend

; Polybar-Style modules foldstart
;(defwidget workspaces []
;  (literal :content workspaces_listen))

(defwidget workspaces [monitor]
  (box
    :class "workspaces"
    :space-evenly false
    :spacing: 5
    (for workspace in workspaces_listen
      (eventbox
        :cursor "pointer"
        :visible {workspace.output == monitor ? true : false}
        (button
          :class {workspace.focused ? "focused" : ""}
          :onclick "i3-msg workspace ${workspace.name}"
          "${workspace.label}")))))

(defwidget window_name []
  (box :class "window-name" "${window_name_listen.name}"))

(defwidget player []
  (icon-module :class "player" :icon "" :visible {player_listen.show == "yes"}
    (literal :content {player_listen.content})))

(defwidget ram []
  (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")))

(defwidget notifications []
  (icon-module :class "notifications" :icon "" :visible {notifications_listen.show == "yes"}
    (literal :content {notifications_listen.content}))) 

(defwidget currency_exchange []
  (label :text currency_exchange_poll))

(defwidget date []
  (icon-module :class "date" :icon "" 
    (button :onclick "~/.config/rofi/calendar/calendar" (label :text date_poll))))

(defwidget time []
  (icon-module :class "time" :icon "" 
    (label :text time_poll))) 

(defwidget nvidia []
  (icon-module :class "nvidia" :icon "" 
    (label :text nvidia_listen))) 

(defwidget cpu []
  (icon-module :class "cpu" :icon "" 
    (label :text "${round(EWW_CPU.avg, 0)}%"))) 

(defwidget disk []
  (icon-module :class "disk" :icon "" 
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%"))) 

(defwidget trash []
  (icon-module :class "trash" :icon "" 
    (label :text trash_poll))) 

(defwidget noisetorch []
  (icon-module :class "noisetorch" :icon "" 
    (label :text noisetorch_poll))) 

(defwidget updates []
  (icon-module :class "updates" :icon "" :visible {updates_poll != ""}
    (label :text updates_poll))) 

(defwidget github []
  (icon-module :class "github" :icon "" :visible {github_poll != ""}
    (label :text github_poll))) 

(defwidget ping []
  (icon-module :class "ping" :icon ""
    (label :text ping_poll))) 

(defwidget network []
  (icon-module :class "network" :icon ""
    (label :text "${round(EWW_NET.enp5s0.NET_UP / 1000000, 2)}/${round(EWW_NET.enp5s0.NET_DOWN / 1000000, 2)}"))) 

(defwidget speaker []
  (icon-module :class "speaker" 
               :icon {speaker_poll.icon}
    (eventbox :onscroll `eww update speaker_poll="$(~/.config/eww/modules/speaker.sh {})"`
      (button :onclick `eww update speaker_poll="$(~/.config/eww/modules/speaker.sh toogle)"`
        (label :text {speaker_poll.content})))))

(defwidget microphone []
  (icon-module :class "microphone" 
               :icon {microphone_poll.icon}
    (eventbox :onscroll `eww update microphone_poll="$(~/.config/eww/modules/microphone.sh {})"`
      (button :onclick `eww update microphone_poll="$(~/.config/eww/modules/microphone.sh toogle)"`
        (label :text {microphone_poll.content})))))
; foldend

; vim:foldmarker=foldstart,foldend
